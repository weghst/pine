buildscript {
    repositories {
        mavenLocal()
        maven { url gradle.privateMavenRepositoryUrl }
        maven { url "http://repo.spring.io/plugins-release" }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "org.zeroturnaround:gradle-jrebel-plugin:1.1.2"
        classpath "com.bmuschko:gradle-tomcat-plugin:2.2.2"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.7.1"
    }
}

configure(allprojects) { project ->

    group = "com.weghst.pine"
    version = "1.0-SNAPSHOT"

    ext.slf4jVersion = "1.7.12"
    ext.springVersion = "4.2.3.RELEASE"
    ext.jacksonVersion = "2.6.0"
    ext.logbackVersion = "1.1.3"
    ext.bonecpVersion = "0.8.0.RELEASE"
    ext.resteasyVersion = "3.0.12.Final"
    ext.testngVersion = "6.9.6"

    // 获取项目所有的[ProjectDependency](示例: compile project(":XXX"))
    ext.allProjectDependencies = { p ->
        def projectDependencies = p.configurations.runtime.allDependencies.withType(ProjectDependency)
        def dependencyProjects = projectDependencies*.dependencyProject

        if (!dependencyProjects.isEmpty()) {
            dependencyProjects.each { dependencyProjects += allProjectDependencies(it) }
        }
        return dependencyProjects.unique()
    }


    apply plugin: "java"
    apply plugin: "com.google.protobuf"
    apply plugin: "findbugs"

    apply plugin: "propdeps"
    apply plugin: "propdeps-idea"
    apply plugin: "propdeps-eclipse"

    apply plugin: "maven"
    apply plugin: "idea"
    apply plugin: "eclipse"

    repositories {
        mavenLocal()
        maven { url gradle.privateMavenRepositoryUrl }
        mavenCentral()
    }

    configurations {
        deployerJars
    }

    findbugs {
        ignoreFailures = true
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/src/generated"

        protoc {
            // The version of protoc must match protobuf-java. If you don't depend on
            // protobuf-java directly, you will be transitively depending on the
            // protobuf-java version that grpc depends on.
            artifact = "com.google.protobuf:protoc:3.0.0-beta-1"
        }
        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:0.9.0'
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars

            //repository(url: "file://localhost/tmp-pine/") {
            //    Properties authProps = new Properties()
            //    authProps.load(new FileInputStream("/maven-upload-auth.properties"))
            //    authentication(userName: authProps["username"], password: authProps["password"])
            //}
        }
    }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

    idea {
        module {
            // excludeDirs = [file(".gradle")]
            // ["classes", "dependency-cache", "libs", "reports", "resources", "test-results", "tmp"].each {
            //     excludeDirs << file("$buildDir/$it")
            // }

            //and hint to mark some of existing source dirs as generated sources
            sourceDirs += file("$projectDir/src/generated/main/java")
            sourceDirs += file("$projectDir/src/generated/main/grpc")
        }
    }
}

configure(subprojects) { project ->

    configurations {
        compile.exclude group: "commons-logging", module: "commons-logging"
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    jar {
        baseName = "$rootProject.name-$project.name"
    }

    dependencies {
        provided "org.projectlombok:lombok:1.16.6"
        // provided "org.immutables:value:2.1.4"

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

        testCompile("org.testng:testng:$testngVersion") {
            exclude module: "guice"
            exclude module: "junit"
            exclude module: "ant"
        }
    }
}
